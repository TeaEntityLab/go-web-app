package migration

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"sort"
	"strings"

	"github.com/sirupsen/logrus"

	"github.com/go-gormigrate/gormigrate/v2"
	"go-web-app/db"
)

var (
	migrations = []*gormigrate.Migration{}
	timezone   = 8
)

const (
	AutogenEndOfFile = "// AutogenEndOfFile"
)

func GetMigrationFileName(datetime string, actionName string, modelname string) string {
	return fmt.Sprintf("db/migration/migration_%s_%s_%s.go", datetime, actionName, modelname)
}
func GetMigrationAutoGenFileName() string {
	return "db/migration/autogen.go"
}
func GetMigrationListForAutoGen() []string {
	var result []string
	filepath.Walk(".", func(path string, fileInfo os.FileInfo, err error) error {
		if err != nil {
			return err
		}

		if !!fileInfo.IsDir() {
			return nil //
		}

		filename := fileInfo.Name()
		matched, err := filepath.Match("migration_*.go", filename)

		if err != nil {
			return err
		}

		if matched {
			result = append(result, strings.TrimSuffix(filename, filepath.Ext(filename)))
		}

		return nil
	})

	sort.Strings(result)

	return result
}
func GenerateMigrationAutogenFile() error {
	// NOTE: The target file is db/migration/autogen.go
	listForAutoGen := GetMigrationListForAutoGen()
	migrationFunctions := make([]string, len(listForAutoGen))
	for i, migrationName := range listForAutoGen {
		migrationFunctions[i] = migrationName + "()\n\t"
	}
	autogenContent := "package migration\n\n// NOTE Don't Modify this file\n\nfunc AutoGenerated() {\n\tmigrations = nil\n\t// AutogenEndOfFile\n}\n"
	autogenContent = strings.Replace(autogenContent,
		AutogenEndOfFile,
		strings.Join(migrationFunctions, "")+AutogenEndOfFile,
		-1)
	// Write back
	err := ioutil.WriteFile(GetMigrationAutoGenFileName(), []byte(autogenContent), 0)
	if err != nil {
		return err
	}
	return nil
}

func Migrate() error {
	var err error
	//if err != nil {
	//	logrus.Fatal(err)
	//	return err
	//}

	AutoGenerated()
	m := gormigrate.New(db.GetDefaultDatabase(), gormigrate.DefaultOptions, migrations)

	if err = m.Migrate(); err != nil {
		logrus.Fatalf("Could not migrate: %v", err)
		return err
	}
	logrus.Printf("Migration did run successfully")

	return nil
}

func MigrateRollback(steps int) error {
	var err error
	//if err != nil {
	//	logrus.Fatal(err)
	//	return err
	//}

	AutoGenerated()
	m := gormigrate.New(db.GetDefaultDatabase(), gormigrate.DefaultOptions, migrations)

	if steps <= 0 {
		steps = 1
	}
	for steps > 0 {
		if err = m.RollbackLast(); err != nil && err != gormigrate.ErrNoRunMigration {
			logrus.Fatalf("Could not rollback: %v", err)
			return err
		}
		if err == gormigrate.ErrNoRunMigration {
			logrus.Printf("There's no more rollback available.(remaining steps: %d)\n", steps)
			return nil
		}
		logrus.Printf("Migration Rollback did run successfully\n")

		steps -= 1
	}

	return nil
}
