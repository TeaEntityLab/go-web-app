package seeder

import (
	"errors"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"sort"
	"strings"

	"github.com/sirupsen/logrus"

	"go-web-app/common/repository"
	"go-web-app/db"
)

type Seeder interface {
	Run() error
	SeederName() string
}

var (
	seeders   []Seeder
	seederMap = map[string]Seeder{}
	timezone  = 8
)

const (
	AutogenEndOfFile = "// AutogenEndOfFile"
)

func GetSeederFileName(datetime string, actionName string, modelname string) string {
	return fmt.Sprintf("db/seeder/seeder_%s_%s_%s.go", datetime, actionName, modelname)
}
func GetSeederAutoGenFileName() string {
	return "db/seeder/autogen.go"
}
func GetSeederListForAutoGen() []string {
	var result []string
	filepath.Walk(".", func(path string, fileInfo os.FileInfo, err error) error {
		if err != nil {
			return err
		}

		if !!fileInfo.IsDir() {
			return nil //
		}

		filename := fileInfo.Name()
		matched, err := filepath.Match("seeder_*.go", filename)

		if err != nil {
			return err
		}

		if matched {
			result = append(result, strings.TrimSuffix(filename, filepath.Ext(filename)))
		}

		return nil
	})

	sort.Strings(result)

	return result
}
func GenerateSeederAutogenFile() error {
	// NOTE: The target file is db/seeder/autogen.go
	listForAutoGen := GetSeederListForAutoGen()
	seederFunctions := make([]string, len(listForAutoGen))
	for i, seederName := range listForAutoGen {
		seederFunctions[i] = seederName + "()\n\t"
	}
	autogenContent := "package seeder\n\n// NOTE Don't Modify this file\n\nfunc AutoGenerated() {\n\tseeders = nil\n\tseederMap = map[string]Seeder{}\n\t// AutogenEndOfFile\n}\n"
	autogenContent = strings.Replace(autogenContent,
		AutogenEndOfFile,
		strings.Join(seederFunctions, "")+AutogenEndOfFile,
		-1)
	// Write back
	err := ioutil.WriteFile(GetSeederAutoGenFileName(), []byte(autogenContent), 0)
	if err != nil {
		return err
	}
	return nil
}

func SeedBySeederName(seederName string) error {
	var err error
	//if err != nil {
	//	logrus.Fatal(err)
	//	return err
	//}

	AutoGenerated()
	seeder := getSeederBySeederName(seederName)

	if seeder == nil {
		err = errors.New("Could not find the seeder: " + seederName)
		logrus.Fatalf("Could not seed: %v", err)
		return err
	}

	if err = seeder.Run(); err != nil {
		logrus.Fatalf("Could not seed the seeder %s: %v", seeder.SeederName(), err)
		return err
	}
	logrus.Printf("Seeder did run successfully")

	return nil
}

func SeedAll() error {
	var err error
	//if err != nil {
	//	logrus.Fatal(err)
	//	return err
	//}

	repository.Init(db.GetDefaultDatabase())

	AutoGenerated()

	for index, seeder := range seeders {
		logrus.Printf("Seeder: %s", seeder.SeederName())
		if err = seeder.Run(); err != nil {
			logrus.Fatalf("Could not seed the seeder %s: %v", seeder.SeederName(), err)
			logrus.Warnf("Remaining seeders: %v", len(seeders)-index)
			return err
		}
	}
	logrus.Printf("Seeder did run successfully")

	return nil
}

func getSeederBySeederName(seederName string) Seeder {
	return seederMap[seederName]
}
